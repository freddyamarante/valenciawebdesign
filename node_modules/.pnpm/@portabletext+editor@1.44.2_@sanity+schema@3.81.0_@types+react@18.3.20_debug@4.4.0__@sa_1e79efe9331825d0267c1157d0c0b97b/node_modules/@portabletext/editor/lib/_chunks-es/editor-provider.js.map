{"version":3,"file":"editor-provider.js","sources":["../../src/editor/create-editor-schema.ts","../../src/editor/define-schema.ts","../../src/internal-utils/debug.ts","../../src/internal-utils/paths.ts","../../src/internal-utils/ranges.ts","../../src/internal-utils/values.ts","../../src/internal-utils/slate-utils.ts","../../src/internal-utils/weakMaps.ts","../../src/editor/editor-actor-context.ts","../../src/editor/hooks/usePortableTextEditor.ts","../../src/internal-utils/schema.ts","../../src/editor/mutation-machine.ts","../../src/internal-utils/validateValue.ts","../../src/internal-utils/withChanges.ts","../../src/internal-utils/withoutPatching.ts","../../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../../src/internal-utils/withUndoRedo.ts","../../src/editor/key-generator.ts","../../src/editor/with-applying-behavior-actions.ts","../../src/editor/plugins/createWithUndoRedo.ts","../../src/editor/sync-machine.ts","../../src/editor/components/Synchronizer.tsx","../../src/converters/converter.json.ts","../../src/converters/converter.portable-text.ts","../../src/converters/converter.text-html.ts","../../src/converters/converter.text-plain.ts","../../src/converters/converters.core.ts","../../src/internal-utils/operationToPatches.ts","../../src/behavior-actions/behavior.action.insert-break.ts","../../../../node_modules/.pnpm/@portabletext+toolkit@2.0.17/node_modules/@portabletext/toolkit/dist/index.js","../../src/internal-utils/sibling-utils.ts","../../src/editor/plugins/createWithPortableTextMarkModel.ts","../../src/editor/plugins/createWithEditableAPI.ts","../../src/behavior-actions/behavior.action.block.set.ts","../../src/behavior-actions/behavior.action.block.unset.ts","../../src/behavior-actions/behavior.action.blur.ts","../../src/behavior-actions/behavior.action.decorator.add.ts","../../src/behavior-actions/behavior.action.delete.ts","../../src/behavior-actions/behavior.action.delete.backward.ts","../../src/behavior-actions/behavior.action.delete.block.ts","../../src/behavior-actions/behavior.action.delete.forward.ts","../../src/behavior-actions/behavior.action.delete.text.ts","../../src/behavior-actions/behavior.action.effect.ts","../../src/behavior-actions/behavior.action.focus.ts","../../src/behavior-actions/behavior.action.insert-inline-object.ts","../../src/behavior-actions/behavior.action.insert-span.ts","../../src/behavior-actions/behavior.action.insert.block.ts","../../src/behavior-actions/behavior.action.insert.text.ts","../../src/behavior-actions/behavior.action.move.block.ts","../../src/behavior-actions/behavior.action.noop.ts","../../src/behavior-actions/behavior.action.select.ts","../../src/behavior-actions/behavior.actions.ts","../../src/editor/plugins/create-with-event-listeners.ts","../../src/editor/plugins/createWithMaxBlocks.ts","../../src/editor/plugins/createWithObjectKeys.ts","../../src/internal-utils/applyPatch.ts","../../src/editor/plugins/createWithPatches.ts","../../src/editor/plugins/createWithPlaceholderBlock.ts","../../src/editor/plugins/createWithPortableTextBlockStyle.ts","../../src/editor/plugins/createWithPortableTextSelections.ts","../../src/editor/plugins/createWithSchemaTypes.ts","../../src/editor/plugins/createWithUtils.ts","../../src/editor/plugins/with-plugins.ts","../../src/editor/create-slate-editor.tsx","../../src/behaviors/behavior.abstract.annotation.ts","../../src/behaviors/behavior.abstract.decorator.ts","../../src/behaviors/behavior.abstract.insert.ts","../../src/behaviors/behavior.abstract.list-item.ts","../../src/behaviors/behavior.abstract.move.ts","../../src/behaviors/behavior.abstract.select.ts","../../src/behaviors/behavior.abstract.style.ts","../../src/internal-utils/key-is.ts","../../src/behaviors/behavior.default.raise-soft-break.ts","../../src/behaviors/behavior.default.ts","../../src/behaviors/behavior.types.event.ts","../../src/behaviors/behavior.perform-event.ts","../../src/internal-utils/slate-children-to-blocks.ts","../../src/editor/get-active-decorators.ts","../../src/editor/editor-snapshot.ts","../../src/editor/editor-machine.ts","../../src/editor/editor-selector.ts","../../src/editor/create-editor.ts","../../src/editor/hooks/usePortableTextEditorSelection.tsx","../../src/editor/PortableTextEditor.tsx","../../src/editor/editor-provider.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title:\n          blockObject.name === 'image' && blockObject.title === undefined\n            ? 'Image'\n            : blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Editor, Element, Node, type Path} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  return (\n    Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n  )\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  const focusChild = Node.child(focusBlock, childIndex)\n\n  return focusChild\n    ? [focusChild, [...focusBlockPath, childIndex]]\n    : [undefined, undefined]\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  return firstBlockPath !== undefined\n    ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n    : [undefined, undefined]\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n  return lastBlockPath !== undefined\n    ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n    : [undefined, undefined]\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        actionId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'patch'\n          patch: Patch\n          actionId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        },\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer patch': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              actionId: event.actionId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.actionId === event.actionId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            actionId: lastBulk.actionId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          actionId: event.actionId,\n          patches: [event.patch],\n        })\n      },\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n  },\n  guards: {\n    'is typing': stateIn({typing: 'typing'}),\n    'no pending mutations': ({context}) =>\n      context.pendingMutations.length === 0,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'mutation debounce': process.env.NODE_ENV === 'test' ? 250 : 0,\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          on: {\n            patch: {\n              actions: ['defer patch', 'emit has pending patches'],\n              target: 'emitting mutations',\n            },\n          },\n        },\n        'emitting mutations': {\n          after: {\n            'mutation debounce': [\n              {\n                guard: and([not('is typing'), 'slate is normalizing']),\n                target: 'idle',\n                actions: ['emit mutations', 'clear pending mutations'],\n              },\n              {\n                target: 'emitting mutations',\n                reenter: true,\n              },\n            ],\n          },\n          on: {\n            patch: {\n              target: 'emitting mutations',\n              actions: ['defer patch'],\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_ACTION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorActions(editor: Editor, fn: () => void) {\n  CURRENT_ACTION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_ACTION_ID.set(editor, undefined)\n}\n\nexport function getCurrentActionId(editor: Editor) {\n  return CURRENT_ACTION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorActions(editor: Editor) {\n  return getCurrentActionId(editor) !== undefined\n}\n\n////////\n\nconst CURRENT_BEHAVIOR_ACTION_SET: WeakMap<\n  Editor,\n  {actionSetId: string} | undefined\n> = new WeakMap()\n\nexport function withApplyingBehaviorActionSet(editor: Editor, fn: () => void) {\n  const current = CURRENT_BEHAVIOR_ACTION_SET.get(editor)\n\n  if (current) {\n    withApplyingBehaviorActions(editor, fn)\n    return\n  }\n\n  CURRENT_BEHAVIOR_ACTION_SET.set(\n    editor,\n    current ?? {\n      actionSetId: defaultKeyGenerator(),\n    },\n  )\n  withApplyingBehaviorActions(editor, fn)\n  CURRENT_BEHAVIOR_ACTION_SET.set(editor, undefined)\n}\n\nexport function getCurrentBehaviorActionSetId(editor: Editor) {\n  return CURRENT_BEHAVIOR_ACTION_SET.get(editor)?.actionSetId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentBehaviorActionSetId} from '../with-applying-behavior-actions'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousBehaviorActionSetId = getCurrentBehaviorActionSetId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentBehaviorActionSetId = getCurrentBehaviorActionSetId(editor)\n\n      let merge =\n        currentBehaviorActionSetId !== undefined &&\n        previousBehaviorActionSetId === undefined\n          ? false\n          : currentBehaviorActionSetId !== undefined &&\n              previousBehaviorActionSetId !== undefined\n            ? currentBehaviorActionSetId === previousBehaviorActionSetId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentBehaviorActionSetId === undefined &&\n            previousBehaviorActionSetId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousBehaviorActionSetId = currentBehaviorActionSetId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoActionImplementation: BehaviorActionImplementation<\n  'history.undo'\n> = ({action}) => {\n  const editor = action.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoActionImplementation: BehaviorActionImplementation<\n  'history.redo'\n> = ({action}) => {\n  const editor = action.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          entry: [\n            () => {\n              debug('entry: syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing initial value')\n            },\n          ],\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: [\n            'emit done syncing initial value',\n            () => {\n              debug('entry: done syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: done syncing initial value')\n            },\n          ],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: syncing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->idle')\n            },\n          ],\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          entry: [\n            () => {\n              debug('entry: syncing->busy')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->busy')\n            },\n          ],\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                target: '.',\n                reenter: true,\n                actions: [\n                  () => {\n                    debug('reenter: syncing->busy')\n                  },\n                ],\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          entry: [\n            () => {\n              debug('entry: syncing->syncing')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->syncing')\n            },\n          ],\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                target: 'syncing',\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks && index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.invalid value',\n          })\n          break\n        case 'value changed':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.value changed',\n          })\n          break\n        case 'patch':\n          props.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              slateEditor.children,\n              props.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(slateEditor),\n            ),\n          })\n          break\n\n        default:\n          props.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, slateEditor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('internal.patch', (event) => {\n      mutationActorRef.send({...event, type: 'patch'})\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: snapshot.context.value,\n      selection,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.('dragging internally'),\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextHtml = defineConverter({\n  mimeType: 'text/html',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: snapshot.context.value,\n      selection,\n    })\n\n    const html = toHTML(blocks, {\n      onMissingComponent: false,\n      components: {\n        unknownType: ({children}) =>\n          children !== undefined ? `${children}` : '',\n      },\n    })\n\n    if (html === '') {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'Serialized HTML is empty',\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: html,\n      mimeType: 'text/html',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = htmlToBlocks(\n      event.data,\n      snapshot.context.schema.portableText,\n      {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          snapshot.context.schema.block.options.unstable_whitespaceOnPasteMode,\n      },\n    ) as Array<PortableTextBlock>\n\n    if (blocks.length === 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'text/html',\n        reason: 'No blocks deserialized',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/html',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isPortableTextTextBlock, type PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextPlain = defineConverter({\n  mimeType: 'text/plain',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: snapshot.context.value,\n      selection,\n    })\n\n    const data = blocks\n      .map((block) => {\n        if (isPortableTextTextBlock(block)) {\n          return block.children\n            .map((child) => {\n              if (child._type === snapshot.context.schema.span.name) {\n                return child.text\n              }\n\n              return snapshot.beta.hasTag('dragging internally')\n                ? `[${\n                    snapshot.context.schema.inlineObjects.find(\n                      (inlineObjectType) =>\n                        inlineObjectType.name === child._type,\n                    )?.title ?? 'Object'\n                  }]`\n                : ''\n            })\n            .join('')\n        }\n\n        return snapshot.beta.hasTag('dragging internally')\n          ? `[${\n              snapshot.context.schema.blockObjects.find(\n                (blockObjectType) => blockObjectType.name === block._type,\n              )?.title ?? 'Object'\n            }]`\n          : ''\n      })\n      .filter((block) => block !== '')\n      .join('\\n\\n')\n\n    return {\n      type: 'serialization.success',\n      data,\n      mimeType: 'text/plain',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const html = escapeHtml(event.data)\n      .split(/\\n{2,}/)\n      .map((line) =>\n        line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>',\n      )\n      .join('')\n\n    const textToHtml = `<html><body>${html}</body></html>`\n\n    const blocks = htmlToBlocks(\n      textToHtml,\n      snapshot.context.schema.portableText,\n      {\n        keyGenerator: snapshot.context.keyGenerator,\n      },\n    ) as Array<PortableTextBlock>\n\n    if (blocks.length === 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'text/plain',\n        reason: 'No blocks deserialized',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/plain',\n    }\n  },\n})\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {converterTextHtml} from './converter.text-html'\nimport {converterTextPlain} from './converter.text-plain'\n\nexport const coreConverters = [\n  converterJson,\n  converterPortableText,\n  converterTextHtml,\n  converterTextPlain,\n]\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, insertText, Node, Path, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    if (!selectionAcrossBlocks) {\n      Transforms.splitNodes(editor, {\n        at: editor.selection,\n        always: true,\n      })\n\n      const [nextBlock, nextBlockPath] = Editor.node(\n        editor,\n        Path.next(focusBlockPath),\n        {depth: 1},\n      )\n\n      const nextChild = Node.child(nextBlock, 0)\n      const firstChildIsInlineObject = !editor.isTextSpan(nextChild)\n\n      if (firstChildIsInlineObject) {\n        // If the first child in the next block is an inline object then we\n        // add an empty span right before it to a place to put the cursor.\n        // This is a Slate constraint that we have to adhere to.\n        Transforms.insertNodes(\n          editor,\n          {\n            _key: context.keyGenerator(),\n            _type: 'span',\n            text: '',\n            marks: [],\n          },\n          {\n            at: [nextBlockPath[0], 0],\n          },\n        )\n      }\n\n      Transforms.setSelection(editor, {\n        anchor: {path: [...nextBlockPath, 0], offset: 0},\n        focus: {path: [...nextBlockPath, 0], offset: 0},\n      })\n\n      /**\n       * Assign new keys to markDefs that are now split across two blocks\n       */\n      if (\n        editor.isTextBlock(nextBlock) &&\n        nextBlock.markDefs &&\n        nextBlock.markDefs.length > 0\n      ) {\n        const newMarkDefKeys = new Map<string, string>()\n\n        const prevNodeSpans = Array.from(Node.children(editor, focusBlockPath))\n          .map((entry) => entry[0])\n          .filter((node) => editor.isTextSpan(node))\n        const children = Node.children(editor, nextBlockPath)\n\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child)) {\n            continue\n          }\n\n          const marks = child.marks ?? []\n\n          // Go through the marks of the span and figure out if any of\n          // them refer to annotations that are also present in the\n          // previous block\n          for (const mark of marks) {\n            if (\n              schema.decorators.some((decorator) => decorator.value === mark)\n            ) {\n              continue\n            }\n\n            if (\n              prevNodeSpans.some((prevNodeSpan) =>\n                prevNodeSpan.marks?.includes(mark),\n              ) &&\n              !newMarkDefKeys.has(mark)\n            ) {\n              // This annotation is both present in the previous block\n              // and this block, so let's assign a new key to it\n              newMarkDefKeys.set(mark, keyGenerator())\n            }\n          }\n\n          const newMarks = marks.map((mark) => newMarkDefKeys.get(mark) ?? mark)\n\n          // No need to update the marks if they are the same\n          if (!isEqual(marks, newMarks)) {\n            Transforms.setNodes(\n              editor,\n              {marks: newMarks},\n              {\n                at: childPath,\n              },\n            )\n          }\n        }\n\n        // Time to update all the markDefs that need a new key because\n        // they've been split across blocks\n        const newMarkDefs = nextBlock.markDefs.map((markDef) => ({\n          ...markDef,\n          _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n        }))\n\n        // No need to update the markDefs if they are the same\n        if (!isEqual(nextBlock.markDefs, newMarkDefs)) {\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {\n              at: nextBlockPath,\n              match: (node) => editor.isTextBlock(node),\n            },\n          )\n        }\n      }\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({action}) => {\n  insertText(action.editor, '\\n')\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../internal-utils/ranges'\nimport {isListItemActive, isStyleActive} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    const annotationKey = context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === action.annotation.name &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              _type: action.annotation.name,\n              _key: annotationKey,\n              ...action.annotation.value,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === action.annotation.name,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockSetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.set'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, ...filteredProps} = action.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(action.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockUnsetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.unset'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  if (isTextBlock(context.schema, parsedBlock)) {\n    const propsToRemove = action.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(action.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      action.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {ReactEditor} from 'slate-react'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blurActionImplementation: BehaviorActionImplementation<'blur'> = ({\n  action,\n}) => {\n  ReactEditor.blur(action.editor)\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toPortableTextRange, toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const decoratorAddActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({context, action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = action.offsets?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.offsets.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = action.offsets?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.offsets.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, action.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = toPortableTextRange(value, selection, context.schema)\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      value: newValue,\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {hasTag: () => false, internalDrag: undefined},\n      context: {\n        activeDecorators: [],\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      const existingMarks: string[] =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        marks: [...existingMarks, mark],\n      }\n      editor.marks = marks as Text\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteActionImplementation: BehaviorActionImplementation<\n  'delete'\n> = ({action}) => {\n  const range = toSlateRange(action.selection, action.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(action.selection)}`,\n    )\n  }\n\n  action.editor.delete({at: range})\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteBackwardActionImplementation: BehaviorActionImplementation<\n  'delete.backward'\n> = ({action}) => {\n  action.editor.deleteBackward(action.unit)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteBlockActionImplementation: BehaviorActionImplementation<\n  'delete.block'\n> = ({action}) => {\n  const range = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!range) {\n    console.error('Unable to find Slate range from selection points')\n    return\n  }\n\n  Transforms.removeNodes(action.editor, {\n    at: range,\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteForwardActionImplementation: BehaviorActionImplementation<\n  'delete.forward'\n> = ({action}) => {\n  action.editor.deleteForward(action.unit)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteTextActionImplementation: BehaviorActionImplementation<\n  'delete.text'\n> = ({context, action}) => {\n  const value = fromSlateValue(\n    action.editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  )\n\n  const selection = utils.blockOffsetsToSelection({\n    value,\n    offsets: {\n      anchor: action.anchor,\n      focus: action.focus,\n    },\n  })\n\n  if (!selection) {\n    throw new Error('Unable to find selection from block offsets')\n  }\n\n  const trimmedSelection = selectors.getTrimmedSelection({\n    beta: {hasTag: () => false, internalDrag: undefined},\n    context: {\n      converters: [],\n      schema: context.schema,\n      keyGenerator: context.keyGenerator,\n      activeDecorators: [],\n      readOnly: false,\n      value,\n      selection,\n    },\n  })\n\n  if (!trimmedSelection) {\n    throw new Error('Unable to find trimmed selection')\n  }\n\n  const range = toSlateRange(trimmedSelection, action.editor)\n\n  if (!range) {\n    throw new Error('Unable to find Slate range from trimmed selection')\n  }\n\n  Transforms.delete(action.editor, {\n    at: range,\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const effectActionImplementation: BehaviorActionImplementation<\n  'effect'\n> = ({action}) => {\n  action.effect()\n}\n","import {ReactEditor} from 'slate-react'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const focusActionImplementation: BehaviorActionImplementation<\n  'focus'\n> = ({action}) => {\n  ReactEditor.focus(action.editor)\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockActionImplementation: BehaviorActionImplementation<\n  'insert.block'\n> = ({context, action}) => {\n  const parsedBlock = parseBlock({\n    block: action.block,\n    context,\n    options: {refreshKeys: false},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: action.placement,\n    select: action.select ?? 'start',\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n  if (!editor.selection || !focusBlock || !focusBlockPath) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n\n      Transforms.insertNodes(editor, [block], {\n        at: focusBlockPath,\n        select: false,\n      })\n\n      const adjustedSelection = Range.transform(currentSelection, {\n        type: 'move_node',\n        path: focusBlockPath,\n        newPath: [focusBlockPath[0] + 1],\n      })\n\n      if (adjustedSelection) {\n        Transforms.select(editor, adjustedSelection)\n      } else {\n        Transforms.select(editor, currentSelection)\n      }\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, focusBlockPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, focusBlockPath))\n      }\n    } else if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      const currentSelection = editor.selection\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n      Transforms.select(editor, currentSelection)\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const focusBlockStartPoint = Editor.start(editor, focusBlockPath)\n\n      if (editor.isTextBlock(focusBlock) && editor.isTextBlock(block)) {\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          if (Point.equals(currentSelection.anchor, focusBlockStartPoint)) {\n            Transforms.select(editor, Editor.start(editor, focusBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n        } else {\n          if (!Point.equals(currentSelection.anchor, focusBlockStartPoint)) {\n            Transforms.select(editor, currentSelection)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(focusBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [focusBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const focusBlockStartPoint = Editor.start(editor, focusBlockPath)\n          const focusBlockEndPoint = Editor.end(editor, focusBlockPath)\n\n          if (Point.equals(currentSelection.anchor, focusBlockStartPoint)) {\n            Transforms.insertNodes(editor, [block], {\n              at: focusBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, focusBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([focusBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(focusBlockPath)})\n            }\n          } else if (Point.equals(currentSelection.focus, focusBlockEndPoint)) {\n            const nextPath = [focusBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [focusBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [focusBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertTextActionImplementation: BehaviorActionImplementation<\n  'insert.text'\n> = ({action}) => {\n  action.editor.insertText(action.text)\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const moveBlockActionImplementation: BehaviorActionImplementation<\n  'move.block'\n> = ({action}) => {\n  const at = [toSlatePath(action.at, action.editor)[0]]\n  const to = [toSlatePath(action.to, action.editor)[0]]\n\n  Transforms.moveNodes(action.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const noopActionImplementation: BehaviorActionImplementation<\n  'noop'\n> = () => {}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const selectActionImplementation: BehaviorActionImplementation<\n  'select'\n> = ({action}) => {\n  const newSelection = toSlateRange(action.selection, action.editor)\n\n  if (newSelection) {\n    Transforms.select(action.editor, newSelection)\n  } else {\n    Transforms.deselect(action.editor)\n  }\n}\n","import {omit} from 'lodash'\nimport type {InternalBehaviorAction} from '../behaviors/behavior.types.action'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {removeDecoratorActionImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoActionImplementation,\n  historyUndoActionImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PickFromUnion} from '../type-utils'\nimport {blockSetBehaviorActionImplementation} from './behavior.action.block.set'\nimport {blockUnsetBehaviorActionImplementation} from './behavior.action.block.unset'\nimport {blurActionImplementation} from './behavior.action.blur'\nimport {decoratorAddActionImplementation} from './behavior.action.decorator.add'\nimport {deleteActionImplementation} from './behavior.action.delete'\nimport {deleteBackwardActionImplementation} from './behavior.action.delete.backward'\nimport {deleteBlockActionImplementation} from './behavior.action.delete.block'\nimport {deleteForwardActionImplementation} from './behavior.action.delete.forward'\nimport {deleteTextActionImplementation} from './behavior.action.delete.text'\nimport {effectActionImplementation} from './behavior.action.effect'\nimport {focusActionImplementation} from './behavior.action.focus'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {insertBlockActionImplementation} from './behavior.action.insert.block'\nimport {insertTextActionImplementation} from './behavior.action.insert.text'\nimport {moveBlockActionImplementation} from './behavior.action.move.block'\nimport {noopActionImplementation} from './behavior.action.noop'\nimport {selectActionImplementation} from './behavior.action.select'\n\nconst debug = debugWithName('behaviors:action')\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends InternalBehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<InternalBehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in InternalBehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'block.set': blockSetBehaviorActionImplementation,\n  'block.unset': blockUnsetBehaviorActionImplementation,\n  'blur': blurActionImplementation,\n  'decorator.add': decoratorAddActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'focus': focusActionImplementation,\n  'delete': deleteActionImplementation,\n  'delete.backward': deleteBackwardActionImplementation,\n  'delete.forward': deleteForwardActionImplementation,\n  'delete.block': deleteBlockActionImplementation,\n  'delete.text': deleteTextActionImplementation,\n  'history.redo': historyRedoActionImplementation,\n  'history.undo': historyUndoActionImplementation,\n  'insert.block': insertBlockActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': insertTextActionImplementation,\n  'effect': effectActionImplementation,\n  'move.block': moveBlockActionImplementation,\n  'noop': noopActionImplementation,\n  'select': selectActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: InternalBehaviorAction\n}) {\n  debug(JSON.stringify(omit(action, ['editor']), null, 2))\n\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.set': {\n      behaviorActionImplementations['block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.unset': {\n      behaviorActionImplementations['block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete': {\n      behaviorActionImplementations.delete({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.redo': {\n      behaviorActionImplementations['history.redo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.undo': {\n      behaviorActionImplementations['history.undo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block': {\n      behaviorActionImplementations['insert.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport {insertSoftBreakActionImplementation} from '../../behavior-actions/behavior.action.insert-break'\nimport {performAction} from '../../behavior-actions/behavior.actions'\nimport {toPortableTextRange} from '../../internal-utils/ranges'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorActions} from '../with-applying-behavior-actions'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {deleteBackward, deleteForward, insertBreak, insertText, select} =\n      editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorActions(editor)) {\n        throw new Error('Unexpected call to .insertData(...)')\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreakActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {type: 'insert.soft break', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText(text, options)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText(text, options)\n        },\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          selection: toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            range,\n            editorActor.getSnapshot().context.schema,\n          ),\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location)\n        },\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.warn('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    } else {\n      return false\n    }\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentActionId} from '../with-applying-behavior-actions'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'notify.unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            actionId: getCurrentActionId(editor),\n            value: fromSlateValue(\n              editor.children,\n              schemaTypes.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../internal-utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'notify.selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'notify.selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport {createOperationToPatches} from '../../internal-utils/operationToPatches'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.offsets\n        ? blockOffsetsToSelection({\n            value: snapshot.context.value,\n            offsets: event.offsets,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: 'end',\n              }),\n            ]\n          : event.blocks.flatMap((block, index) =>\n              index === 0\n                ? [\n                    raise({\n                      type: 'insert.break',\n                    }),\n                    raise({\n                      type: 'select.previous block',\n                      select: 'end',\n                    }),\n                    raise({\n                      type: 'insert.block',\n                      block,\n                      placement: 'auto',\n                      select: 'end',\n                    }),\n                  ]\n                : index === event.blocks.length - 1\n                  ? [\n                      raise({\n                        type: 'select.next block',\n                        select: 'start',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: 'end',\n                      }),\n                    ]\n                  : [\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'after',\n                        select: 'end',\n                      }),\n                    ],\n            ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint(previousBlock)\n          : getBlockStartPoint(previousBlock)\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint(nextBlock)\n          : getBlockStartPoint(nextBlock)\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\n/**\n * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n * than an `insertLineBreak` input event. This Behavior makes sure we catch\n * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n */\nexport const raiseInsertSoftBreak = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({event}) => keyIs.lineBreak(event.originEvent),\n  actions: [() => [raise({type: 'insert.soft break'})]],\n})\n","import {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raiseInsertSoftBreak} from './behavior.default.raise-soft-break'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    const deserializeEvents = snapshot.context.converters.flatMap(\n      (converter) => {\n        const data = event.originEvent.originEvent.dataTransfer.getData(\n          converter.mimeType,\n        )\n\n        if (!data) {\n          return []\n        }\n\n        return [\n          converter.deserialize({\n            snapshot,\n            event: {type: 'deserialize', data},\n          }),\n        ]\n      },\n    )\n\n    const firstSuccess = deserializeEvents.find(\n      (deserializeEvent) => deserializeEvent.type === 'deserialization.success',\n    )\n\n    if (!firstSuccess) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: deserializeEvents\n          .map((deserializeEvent) =>\n            deserializeEvent.type === 'deserialization.failure'\n              ? deserializeEvent.reason\n              : '',\n          )\n          .join(', '),\n      } as const\n    }\n\n    return firstSuccess\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const defaultBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          selection: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        snapshot.beta.internalDrag === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = snapshot.beta.internalDrag.origin\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent},\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                selection: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.context.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context.schema, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n  raiseInsertSoftBreak,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | AbstractBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | AbstractBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | PickFromUnion<\n      AbstractBehaviorEvent,\n      'type',\n      | 'annotation.toggle'\n      | 'decorator.toggle'\n      | 'insert.blocks'\n      | 'list item.add'\n      | 'list item.remove'\n      | 'list item.toggle'\n      | 'style.add'\n      | 'style.remove'\n      | 'style.toggle'\n    >\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'blur',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'delete.backward',\n  'delete.block',\n  'delete.forward',\n  'delete.text',\n  'focus',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.break',\n  'insert.soft break',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.block',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType = (typeof syntheticBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'blur'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      offsets?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      selection: NonNullable<EditorSelection>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      anchor: BlockOffset\n      focus: BlockOffset\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'focus'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      selection: EditorSelection\n    }\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isKeyboardBehaviorEvent(\n  event: BehaviorEvent,\n): event is KeyboardBehaviorEvent {\n  return event.type.startsWith('keyboard.')\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.toggle',\n  'decorator.toggle',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\ntype AbstractBehaviorEventType = (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEventNamespace =\n  ExtractNamespace<AbstractBehaviorEventType>\n\nexport type AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      offsets?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'insert.blocks'>\n      blocks: Array<PortableTextBlock>\n      placement: InsertPlacement\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'move.block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'move.block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<AbstractBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import type {Behavior, BehaviorEvent} from '.'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  withApplyingBehaviorActions,\n  withApplyingBehaviorActionSet,\n} from '../editor/with-applying-behavior-actions'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalBehaviorAction} from './behavior.types.action'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'abstract'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  behaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  defaultActionCallback,\n}: {\n  behaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  defaultActionCallback: (() => void) | undefined\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n}) {\n  debug(`(${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const defaultAction =\n    isCustomBehaviorEvent(event) ||\n    isNativeBehaviorEvent(event) ||\n    isAbstractBehaviorEvent(event)\n      ? undefined\n      : ({\n          ...event,\n          editor,\n        } satisfies InternalBehaviorAction)\n\n  const eventBehaviors = behaviors.filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0) {\n    if (defaultActionCallback) {\n      withApplyingBehaviorActions(editor, () => {\n        try {\n          defaultActionCallback()\n        } catch (error) {\n          console.error(\n            new Error(\n              `Performing action \"${event.type}\" failed due to: ${error.message}`,\n            ),\n          )\n        }\n      })\n      return\n    }\n\n    if (!defaultAction) {\n      return\n    }\n\n    withApplyingBehaviorActions(editor, () => {\n      try {\n        performAction({\n          context: {\n            keyGenerator,\n            schema,\n          },\n          action: defaultAction,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    })\n    editor.onChange()\n    return\n  }\n\n  const editorSnapshot = getSnapshot()\n\n  let behaviorOverwritten = false\n\n  for (const eventBehavior of eventBehaviors) {\n    const shouldRun =\n      eventBehavior.guard === undefined ||\n      eventBehavior.guard({\n        context: editorSnapshot.context,\n        snapshot: editorSnapshot,\n        event,\n      })\n\n    if (!shouldRun) {\n      continue\n    }\n\n    const actionSets = eventBehavior.actions.map((actionSet) =>\n      actionSet(\n        {\n          context: editorSnapshot.context,\n          snapshot: editorSnapshot,\n          event,\n        },\n        shouldRun,\n      ),\n    )\n\n    for (const actionSet of actionSets) {\n      if (actionSet.length === 0) {\n        continue\n      }\n\n      behaviorOverwritten =\n        behaviorOverwritten ||\n        actionSet.some((action) => action.type !== 'effect')\n\n      withApplyingBehaviorActionSet(editor, () => {\n        for (const action of actionSet) {\n          if (action.type === 'raise') {\n            performEvent({\n              behaviors,\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              defaultActionCallback: undefined,\n              nativeEvent: undefined,\n            })\n\n            continue\n          }\n\n          const internalAction = {\n            ...action,\n            editor,\n          }\n\n          try {\n            performAction({\n              context: {\n                keyGenerator,\n                schema,\n              },\n              action: internalAction,\n            })\n          } catch (error) {\n            console.error(\n              new Error(\n                `Performing action \"${internalAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n            break\n          }\n        }\n      })\n      editor.onChange()\n    }\n\n    if (behaviorOverwritten) {\n      nativeEvent?.preventDefault()\n      break\n    }\n  }\n\n  if (!behaviorOverwritten) {\n    if (defaultActionCallback) {\n      withApplyingBehaviorActions(editor, () => {\n        try {\n          defaultActionCallback()\n        } catch (error) {\n          console.error(\n            new Error(\n              `Performing \"${event.type}\" failed due to: ${error.message}`,\n            ),\n          )\n        }\n      })\n      return\n    }\n\n    if (!defaultAction) {\n      return\n    }\n\n    withApplyingBehaviorActions(editor, () => {\n      try {\n        performAction({\n          context: {\n            keyGenerator,\n            schema,\n          },\n          action: defaultAction,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    })\n    editor.onChange()\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\n\nexport function slateChildrenToBlocks(\n  schema: EditorSchema,\n  value: Array<Descendant>,\n): Array<PortableTextBlock> {\n  const blocks: Array<PortableTextBlock> = new Array(value.length)\n\n  for (let blockIndex = 0; blockIndex < value.length; blockIndex++) {\n    const descendant = value[blockIndex]\n\n    if (descendant._type !== schema.block.name) {\n      blocks[blockIndex] = {\n        _key: descendant._key,\n        _type: descendant._type,\n        ...('value' in descendant && typeof descendant.value === 'object'\n          ? descendant.value\n          : {}),\n      }\n      continue\n    }\n\n    const children = 'children' in descendant ? descendant.children : []\n    const processedChildren = new Array(children.length)\n\n    for (let childIndex = 0; childIndex < children.length; childIndex++) {\n      const child = children[childIndex]\n      processedChildren[childIndex] =\n        child._type === schema.span.name\n          ? child\n          : {\n              _key: child._key,\n              _type: child._type,\n              ...('value' in child && typeof child.value === 'object'\n                ? child.value\n                : {}),\n            }\n    }\n\n    blocks[blockIndex] = {\n      ...descendant,\n      children: processedChildren,\n    }\n  }\n\n  return blocks\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {toPortableTextRange} from '../internal-utils/ranges'\nimport {slateChildrenToBlocks} from '../internal-utils/slate-children-to-blocks'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport type {HasTag} from './editor-machine'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  activeDecorators: Array<string>\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    hasTag: HasTag\n    internalDrag:\n      | {\n          origin: Pick<EventPosition, 'selection'>\n        }\n      | undefined\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  hasTag: HasTag\n  internalDrag:\n    | {\n        origin: Pick<EventPosition, 'selection'>\n      }\n    | undefined\n}) {\n  const value = slateChildrenToBlocks(schema, editor.children)\n  const selection = toPortableTextRange(value, editor.selection, schema)\n\n  const context = {\n    activeDecorators: getActiveDecorators({\n      schema,\n      slateEditorInstance: editor,\n    }),\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      hasTag,\n      internalDrag,\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport {defaultBehaviors} from '../behaviors/behavior.default'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {Behavior} from '../behaviors/behavior.types.behavior'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {NamespaceEvent} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\n\nexport * from 'xstate/guards'\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'add behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'remove behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update key generator'\n      keyGenerator: () => string\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\ntype PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  actionId?: string\n  value: Array<PortableTextBlock>\n}\n\ntype UnsetEvent = {\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\nexport type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing initial value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      defaultActionCallback?: () => void\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | NamespaceEvent<EditorEmittedEvent, 'notify'>\n  | NamespaceEvent<UnsetEvent, 'notify'>\n  | {\n      type: 'dragstart'\n      origin: Pick<EventPosition, 'selection'>\n      ghost?: HTMLElement\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | EditorEmittedEvent\n  | InternalPatchEvent\n  | PatchesEvent\n  | UnsetEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<Behavior>\n      converters: Set<Converter>\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        ghost?: HTMLElement\n        origin: Pick<EventPosition, 'selection'>\n      }\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      converters?: Array<Converter>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behavior])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behavior)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return new Set([...event.behaviors])\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n      enqueue.emit({type: 'patch', patch: event.patch})\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        if (event.type === 'internal.patch') {\n          enqueue.emit(event)\n          enqueue.emit({type: 'patch', patch: event.patch})\n        } else {\n          enqueue.emit(event)\n        }\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      performEvent({\n        behaviors: [...context.behaviors.values(), ...defaultBehaviors],\n        event: event.behaviorEvent,\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        getSnapshot: () =>\n          createEditorSnapshot({\n            converters: [...context.converters],\n            editor: event.editor,\n            keyGenerator: context.keyGenerator,\n            readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n            schema: context.schema,\n            hasTag: (tag) => self.getSnapshot().hasTag(tag),\n            internalDrag: context.internalDrag,\n          }),\n        nativeEvent: event.nativeEvent,\n        defaultActionCallback:\n          event.type === 'behavior event'\n            ? event.defaultActionCallback\n            : undefined,\n      })\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([...(input.behaviors ?? coreBehaviors)]),\n    converters: new Set(input.converters ?? []),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'notify.blurred': {\n      actions: emit(({event}) => ({...event, type: 'blurred'})),\n    },\n    'notify.done loading': {actions: emit({type: 'done loading'})},\n    'notify.error': {actions: emit(({event}) => ({...event, type: 'error'}))},\n    'notify.invalid value': {\n      actions: emit(({event}) => ({...event, type: 'invalid value'})),\n    },\n    'notify.focused': {\n      actions: emit(({event}) => ({...event, type: 'focused'})),\n    },\n    'notify.selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'notify.unset': {actions: emit(({event}) => ({...event, type: 'unset'}))},\n    'notify.loading': {actions: emit({type: 'loading'})},\n    'notify.value changed': {\n      actions: emit(({event}) => ({...event, type: 'value changed'})),\n    },\n\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'patches': {actions: emit(({event}) => event)},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update key generator': {\n      actions: assign({keyGenerator: ({event}) => event.keyGenerator}),\n    },\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        ghost: event.ghost,\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'dragging internally': {\n              exit: [\n                ({context}) => {\n                  if (context.internalDrag?.ghost) {\n                    try {\n                      context.internalDrag.ghost.parentNode?.removeChild(\n                        context.internalDrag.ghost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the internal drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                'normalizing': {\n                  target: 'normalizing',\n                },\n                'internal.patch': {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'internal.patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            'internal.patch': {\n              actions: 'emit patch event',\n            },\n            'mutation': {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {useSelector} from '@xstate/react'\nimport {slateChildrenToBlocks} from '../internal-utils/slate-children-to-blocks'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor, InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateChildrenToBlocks(\n        editorActorSnapshot.context.schema,\n        slateEditorInstance.children,\n      ),\n    },\n    beta: {\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag,\n    },\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types.behavior'\nimport type {ExternalBehaviorEvent} from '../behaviors/behavior.types.event'\nimport {coreConverters} from '../converters/converters.core'\nimport {compileType} from '../internal-utils/schema'\nimport type {EditableAPI} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type ExternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent = ExternalEditorEvent | ExternalBehaviorEvent\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  /**\n   * @beta\n   */\n  registerBehavior: (config: {behavior: Behavior}) => () => void\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n}\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): InternalEditor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createInternalEditorFromActor(editorActor)\n}\n\nexport function useCreateInternalEditor(config: EditorConfig): InternalEditor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(\n    () => createInternalEditorFromActor(editorActor),\n    [editorActor],\n  )\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    converters: coreConverters,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createInternalEditorFromActor(\n  editorActor: EditorActor,\n): InternalEditor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (config) => {\n      editorActor.send({\n        type: 'add behavior',\n        behavior: config.behavior,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behavior: config.behavior,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'add behavior':\n        case 'remove behavior':\n        case 'update behaviors':\n        case 'update key generator':\n        case 'update readOnly':\n        case 'patches':\n        case 'update value':\n        case 'update schema':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = editorActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n    } else {\n      this.editor = createInternalEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'mutation': {\n          handleChange(event)\n          break\n        }\n        case 'ready': {\n          handleChange(event)\n          break\n        }\n        case 'selection': {\n          handleChange(event)\n          break\n        }\n        case 'unset': {\n          handleChange(event)\n          break\n        }\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return null\n}\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {\n  useCreateInternalEditor,\n  type Editor,\n  type EditorConfig,\n} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const internalEditor = useCreateInternalEditor(props.initialConfig)\n  const editorActor = internalEditor._internal.editorActor\n  const slateEditor = internalEditor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor: internalEditor,\n      } as unknown as PortableTextEditorProps),\n    [internalEditor],\n  )\n\n  return (\n    <EditorContext.Provider value={internalEditor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","undefined","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","text","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","getFocusBlock","node","getFocusChild","focusBlock","focusBlockPath","focusChild","Node","getFirstBlock","firstBlockPath","start","getLastBlock","lastBlockPath","end","getNodeBlock","isEditor","isBlockElement","elementToBlock","element","parent","mode","some","isInline","isListItemActive","listItem","selectedBlocks","isTextBlock","every","isListBlock","isStyleActive","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","PortableTextEditorContext","usePortableTextEditor","useContext","compileType","rawType","Schema","mutationMachine","setup","context","events","input","emitted","actions","emit","enqueueActions","enqueue","bulk","pendingMutations","patches","snapshot","assign","event","assertEvent","actionId","patch","lastBulk","actors","fromCallback","sendBack","originalApply","slateEditor","apply","op","guards","stateIn","typing","no pending mutations","slate is normalizing","isNormalizing","delays","process","env","NODE_ENV","createMachine","id","states","initial","invoke","src","idle","on","target","after","reenter","mutations","guard","and","not","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","item","i18n","blk","index","isPlainObject","String","values","set","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","cld","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childKey","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultKeyGenerator","randomKey","getByteHexTable","table","i","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","CURRENT_ACTION_ID","withApplyingBehaviorActions","withoutNormalizing","getCurrentActionId","isApplyingBehaviorActions","CURRENT_BEHAVIOR_ACTION_SET","withApplyingBehaviorActionSet","current","actionSetId","getCurrentBehaviorActionSetId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","previousBehaviorActionSetId","subscriptions","push","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","currentBehaviorActionSetId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoActionImplementation","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutSaving","err","Transforms","deselect","onChange","pop","historyRedoActionImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","properties","currentAnchor","newFocus","newProperties","newAnchor","level","blockIndex","newPath","Path","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","readOnly","pendingValue","previousValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","value changed while syncing","pending value equals previous value","entry","exit","always","busy","syncing","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","warn","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","delete","insertText","voids","Synchronizer","props","$","useSelector","_temp","_temp2","t0","t1","t2","t3","t4","syncActorRef","useActorRef","t5","t6","mutationActorRef","t7","t8","subscription","send","useEffect","t10","t9","subscription_0","event_0","bb15","t11","t12","t13","t14","t15","event_1","t16","s_0","s","displayName","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","beta","internalDrag","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","refreshKeys","hasTag","converterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","unstable_whitespaceOnPasteMode","converterTextPlain","inlineObjectType","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","coreConverters","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","blockKey","keys","Object","keyName","val","indexOf","insertNodePatch","position","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetBlock","targetChild","childToInsert","insertBreakActionImplementation","anchorBlockPath","descendant","splitNodes","nextBlock","nextBlockPath","next","depth","nextChild","setSelection","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","has","newMarks","newMarkDefs","markDef","insertSoftBreakActionImplementation","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","isBefore","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","normalizeNode","nodeEntry","nextNode","mergeNodes","orphanedAnnotations","markDefKeys","Set","add","previousSelectionIsCollapsed","isCollapsed","newSelectionIsCollapsed","focusSpan","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","targetPath","oldDefs","removeDecoratorActionImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","existingMarks","isDecoratorActive","selectedTextNodes","createEditableAPI","behaviorEvent","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","undo","redo","slateSelection","insertChild","focusChildPath","focusNode","move","distance","unit","insertBlock","placement","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","toDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","SlateElement","removeAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetBehaviorActionImplementation","location","filteredProps","slateBlock","blockUnsetBehaviorActionImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","blurActionImplementation","decoratorAddActionImplementation","manualAnchor","offsets","utils","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","trimmedSelection","selectors","activeDecorators","newRange","splitTextNodes","deleteActionImplementation","deleteBackwardActionImplementation","deleteBackward","deleteBlockActionImplementation","deleteForwardActionImplementation","deleteForward","deleteTextActionImplementation","effectActionImplementation","effect","focusActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","insertBlockActionImplementation","fragment","DOMEditor","lastBlock","nextPath","selectionBefore","insertFragment","adjustedSelection","focusBlockStartPoint","focusBlockEndPoint","insertTextActionImplementation","moveBlockActionImplementation","to","moveNodes","noopActionImplementation","selectActionImplementation","behaviorActionImplementations","performAction","createWithEventListeners","maxBlocks","insertData","dataTransfer","insertSoftBreak","defaultActionCallback","setFragmentData","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","insertNode","createWithPortableTextBlockStyle","defaultStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","abstractAnnotationBehaviors","defineBehavior","isActiveAnnotation","raise","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractInsertBehaviors","getFocusTextBlock","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","previousBlock","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractStyleBehaviors","isActiveStyle","keyIs","lineBreak","shiftKey","raiseInsertSoftBreak","raiseDeserializationSuccessOrFailure","deserializeEvents","getData","deserializeEvent","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","defaultBehaviors","selectionCollapsed","setData","dragOrigin","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","textRuns","getTextBlockText","textRun","abstractBehaviorEventTypes","isAbstractBehaviorEvent","nativeBehaviorEventTypes","isNativeBehaviorEvent","isCustomBehaviorEvent","startsWith","eventCategory","performEvent","behaviors","nativeEvent","defaultAction","eventBehaviors","behavior","listenedNamespace","eventNamespace","message","editorSnapshot","behaviorOverwritten","eventBehavior","shouldRun","actionSets","actionSet","internalAction","preventDefault","slateChildrenToBlocks","processedChildren","getActiveDecorators","slateEditorInstance","createEditorSnapshot","editorMachine","tags","pendingEvents","handle behavior event","self","tag","coreBehaviors","initialReadOnly","dragstart","ghost","parentNode","removeChild","dragend","drop","normalizing","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","_internal","createInternalEditor","createActor","editorConfigToMachineInput","createInternalEditorFromActor","useCreateInternalEditor","schemaDefinition","hasOwnProperty","registerBehavior","listener","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","useState","startTransition","PortableTextEditor","Component","change$","Subject","constructor","schemaType","Number","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EditorContext","React","EditorProvider","internalEditor","initialConfig","portableTextEditor","useEditor"],"mappings":"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","x_google_ignoreList":[15,29]}